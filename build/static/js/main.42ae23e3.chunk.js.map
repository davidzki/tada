{"version":3,"sources":["NewTodoForm.js","TodoItem.js","TodoList.js","MenuBar.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","react_default","a","createElement","onSubmit","formSubmitted","onChange","newTodoChanged","id","name","value","newTodo","placeholder","ethAmountChanged","ethAmount","type","min","step","className","TodoItem","todo","index","done","title","amount","onClick","removeTodo","TodoList","todos","map","src_TodoItem","key","MenuBar","Dashboard","length","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","Date","event","setState","target","preventDefault","timeLeft","concat","toConsumableArray","splice","src_MenuBar","src_NewTodoForm","bind","src_TodoList","src_Dashboard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAmCeA,SAjCK,SAACC,GAEnB,OAEUC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,eAEpBJ,EAAAC,EAAAC,cAAA,SACIG,SAAUN,EAAMO,eAChBC,GAAG,UACHC,KAAK,UACLC,MAAOV,EAAMW,QACbC,YAAY,iBAGhBX,EAAAC,EAAAC,cAAA,SACEG,SAAUN,EAAMa,iBAChBH,MAAOV,EAAMc,UACbN,GAAG,YACHO,KAAK,SACLC,IAAI,OACJC,KAAK,OACLL,YAAY,kBAIhBX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQY,KAAK,SAASG,UAAU,2BCD/BC,EAzBE,SAACnB,GAAU,IACnBoB,EAAepB,EAAfoB,KAAMC,EAASrB,EAATqB,MACb,OACEpB,EAAAC,EAAAC,cAAA,UAEEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,OAAKe,UAAWE,EAAKE,KAAO,OAAS,IAAKF,EAAKG,QAGjDtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,WAAMiB,EAAKI,SAGbvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQsB,QAAS,kBAAMzB,EAAM0B,WAAWL,KAAQpB,EAAAC,EAAAC,cAAA,KAAGe,UAAU,6BCDtDS,EAhBE,SAAC3B,GAChB,OACEC,EAAAC,EAAAC,cAAA,UACGH,EAAM4B,MAAMC,IAAI,SAACT,EAAMC,GACtB,OACEpB,EAAAC,EAAAC,cAAC2B,EAAD,CACAC,IAAKV,EACLA,MAAOA,EACPD,KAAMA,EACNM,WAAY1B,EAAM0B,iBCDbM,EATC,WACd,OACE/B,EAAAC,EAAAC,cAAA,OAAKe,UAAU,WACbjB,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,gFCIS8B,EARG,SAACjC,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKe,UAAU,aACPjB,EAAAC,EAAAC,cAAA,+BAAsBF,EAAAC,EAAAC,cAAA,QAAMe,UAAU,UAAUlB,EAAM4B,MAAMM,WC6EzDC,cAzEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXhC,QAAS,GACTiB,MAAO,GACPgB,KAAM,IAAIC,MALAT,8EASCU,GACbP,KAAKQ,SAAS,CACVpC,QAASmC,EAAME,OAAOtC,iDAIXoC,GACfP,KAAKQ,SAAS,CACVjC,UAAWgC,EAAME,OAAOtC,8CAIhBoC,GACZA,EAAMG,iBACNV,KAAKQ,SAAS,CACZG,SAAU,GACVvC,QAAS,GACTG,UAAW,GACTc,MAAK,GAAAuB,OAAAd,OAAAe,EAAA,EAAAf,CAAME,KAAKI,MAAMf,OAAjB,CAAwB,CAC3BL,MAAOgB,KAAKI,MAAMhC,QAClBa,OAAQe,KAAKI,MAAM7B,UACnBoC,SAAUX,KAAKI,MAAMO,SACrB5B,MAAM,0CAKHD,GACT,IAAMO,EAAKS,OAAAe,EAAA,EAAAf,CAAOE,KAAKI,MAAMf,OAC7BA,EAAMyB,OAAOhC,EAAO,GACpBkB,KAAKQ,SAAS,CACZnB,2CAMF,OACE3B,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OAEbjB,EAAAC,EAAAC,cAACmD,EAAD,MAEArD,EAAAC,EAAAC,cAACoD,EAAD,CACElD,cAAekC,KAAKlC,cAAcmD,KAAKjB,MACvChC,eAAgBgC,KAAKhC,eAAeiD,KAAKjB,MACzC5B,QAAS4B,KAAKI,MAAMhC,QACpBE,iBAAkB0B,KAAK1B,iBAAiB2C,KAAKjB,MAC7CzB,UAAWyB,KAAKI,MAAM7B,YAG1Bb,EAAAC,EAAAC,cAACsD,EAAD,CACE7B,MAAOW,KAAKI,MAAMf,MAClBF,WAAYa,KAAKb,WAAW8B,KAAKjB,QAGnCtC,EAAAC,EAAAC,cAACuD,EAAD,CACE9B,MAAOW,KAAKI,MAAMf,gBAnER+B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.42ae23e3.chunk.js","sourcesContent":["import React from 'react'\n\nconst NewTodoForm = (props) => {\n\n  return (\n\n            <form onSubmit={props.formSubmitted}>\n\n              <input\n                  onChange={props.newTodoChanged}\n                  id=\"newTodo\"\n                  name=\"newTodo\"\n                  value={props.newTodo}\n                  placeholder=\"Name of task\"\n                  />\n\n              <input\n                onChange={props.ethAmountChanged}\n                value={props.ethAmount}\n                id=\"ethAmount\"\n                type=\"number\"\n                min=\"0.01\"\n                step=\"0.01\"\n                placeholder=\"Amount in ETH\"\n                />\n\n\n            <div>\n              <button type=\"submit\" className=\"fas fa-plus-circle\"></button>\n            </div>\n\n            </form>\n  )\n}\n\nexport default NewTodoForm\n","import React from 'react'\n\nconst TodoItem = (props) => {\n  const {todo, index} = props;\n  return (\n    <li>\n\n      <div>\n        <label>Task description</label>\n        <div className={todo.done ? 'done' : ''}>{todo.title}</div>\n      </div>\n\n      <div>\n        <label>ETH at stake</label>\n        <div>{todo.amount}</div>\n      </div>\n\n      <div>\n        <label>Done?</label>\n        <div>\n        <button onClick={() => props.removeTodo(index)}><i className=\"fas fa-check-circle\"></i></button>\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport default TodoItem\n","import React from 'react'\nimport TodoItem from './TodoItem'\n\nconst TodoList = (props) => {\n  return (\n    <ul>\n      {props.todos.map((todo, index) => {\n        return (\n          <TodoItem\n          key={index}\n          index={index}\n          todo={todo}\n          removeTodo={props.removeTodo}\n          />)\n      })}\n    </ul>\n  )\n}\n\nexport default TodoList\n","import React from 'react'\n\nconst MenuBar = () => {\n  return (\n    <div className=\"menubar\">\n      <h1>tada!</h1>\n      <p>Do you need help to get things done? Then tada! might be of help!</p>\n    </div>\n  )\n}\n\nexport default MenuBar\n","import React from 'react'\n\nconst Dashboard = (props) => {\n  return (\n    <div className=\"dashboard\">\n            <p>Tasks in progress: <span className=\"number\">{props.todos.length}</span></p>\n    </div>\n  )\n}\n\nexport default Dashboard\n","import React, { Component } from 'react';\nimport './App.css';\nimport NewTodoForm from './NewTodoForm'\nimport TodoList from './TodoList'\nimport MenuBar from './MenuBar'\nimport Dashboard from './Dashboard'\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      newTodo: '',\n      todos: [],\n      time: new Date()\n    };\n  }\n\n  newTodoChanged(event) {\n    this.setState({\n        newTodo: event.target.value,\n      });\n  }\n\n  ethAmountChanged(event) {\n    this.setState({\n        ethAmount: event.target.value,\n      });\n  }\n\n  formSubmitted(event) {\n    event.preventDefault();\n    this.setState({\n      timeLeft: '',\n      newTodo: '',\n      ethAmount: '',\n        todos: [...this.state.todos, {\n          title: this.state.newTodo,\n          amount: this.state.ethAmount,\n          timeLeft: this.state.timeLeft,\n          done: false\n        }]\n      });\n  }\n\n  removeTodo(index) {\n    const todos = [...this.state.todos]; // copy the array\n    todos.splice(index, 1);\n    this.setState({\n      todos\n      });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <MenuBar />\n\n        <NewTodoForm\n          formSubmitted={this.formSubmitted.bind(this)}\n          newTodoChanged={this.newTodoChanged.bind(this)}\n          newTodo={this.state.newTodo}\n          ethAmountChanged={this.ethAmountChanged.bind(this)}\n          ethAmount={this.state.ethAmount}\n        />\n\n      <TodoList\n        todos={this.state.todos}\n        removeTodo={this.removeTodo.bind(this)}\n        />\n\n      <Dashboard\n        todos={this.state.todos}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}